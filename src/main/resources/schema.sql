-- see https://web.archive.org/web/20240718080538/https://www.koyeb.com/tutorials/using-spring-authorization-server-as-an-auth-solution-on-koyeb
-- auth-koyeb/auth-server/src/main/resources/schema.sql

-- users
create table if not exists users
(
    username varchar(200) not null primary key,
    password varchar(500) not null,
    enabled  boolean      not null,
    constraint username UNIQUE (username)
);

-- authorities
create table if not exists authorities
(
    username  varchar(200) not null,
    authority varchar(50)  not null,
    constraint fk_authorities_users foreign key (username) references users (username),
    constraint username_authority UNIQUE (username, authority)
    );
create unique index if not exists  ix_auth_username on authorities (username,authority);

-- groups
create table if not exists  groups (
                                       id bigint generated by default as identity(start with 1) primary key,
    group_name varchar(50) not null,
    constraint group_name UNIQUE (group_name)
    );

create table if not exists  group_authorities (
                                                  group_id bigint not null,
                                                  authority varchar(50) not null,
    constraint authority UNIQUE (authority),
    constraint fk_group_authorities_group foreign key(group_id) references groups(id)
    );

create table if not exists  group_members (
                                              id bigint generated by default as identity(start with 1) primary key,
    username varchar(50) not null,
    group_id bigint not null,
    constraint username_group_id UNIQUE (username, group_id),
    constraint fk_group_members_group foreign key(group_id) references groups(id)
    );


CREATE OR REPLACE FUNCTION data_of(_tbl_type anyelement, _type text, _name text, _start text, _end text)
    RETURNS SETOF anyelement
    LANGUAGE plpgsql AS
$func$
BEGIN
    -- RAISE NOTICE E'HELLO $1 = "%"', _start -- (parse_ident(_tbl_type::text))[2]
    RETURN QUERY EXECUTE format('
      SELECT t.*
      FROM   capm.objects o,
             %s  t
      WHERE  o.name = $3
            and o.type = $2 and t.id = o.id and t.ts BETWEEN $4 and $5 '
        , pg_typeof(_tbl_type))
        USING  (parse_ident(_tbl_type::text))[2], _type, _name, _start::timestamp, _end::timestamp;
    -- RAISE NOTICE E'HELLO $1 = "%"', _start -- (parse_ident(_tbl_type::text))[2]
END
$func$;

-- DROPPING THE API WITH CASCADE takes out tables too
-- drop schema api cascade ;
-- drop table users cascade ;
-- drop table authorities cascade ;
-- drop table groups cascade ;
-- drop table group_members cascade ;
-- drop index ix_auth_username ;


